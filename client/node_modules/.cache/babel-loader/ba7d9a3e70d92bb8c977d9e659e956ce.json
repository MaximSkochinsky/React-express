{"ast":null,"code":"const isNotEmpty = value => {\n  let error = \"\",\n      isValid = true;\n\n  if (value === \"\") {\n    error = \"Please provide a value\";\n    isValid = false;\n  }\n\n  return {\n    error,\n    isValid\n  };\n};\n\nconst isValidCardNumber = cardNumber => {\n  let error = \"\",\n      isValid = true;\n  const re = /^\\d{16}$/;\n  isValid = re.test(cardNumber);\n\n  if (!isValid) {\n    error = \"Your card number is incomplete\";\n  }\n\n  return {\n    error,\n    isValid\n  };\n};\n\nconst stripNonNumericCharacters = str => {\n  return str.replace(/[^0-9]+/g, \"\");\n};\n\nconst identity = value => value;\n\nconst formatCardNumber = cardNumber => {\n  if (!cardNumber.length) return \"\";\n  const nonNumericCharactersRe = /[^0-9]/;\n  const containsNonNumericCharacters = nonNumericCharactersRe.test(cardNumber);\n  if (containsNonNumericCharacters) return cardNumber;\n  if (cardNumber.length < 5) return cardNumber;\n  return `${cardNumber.slice(0, 4)} ${formatCardNumber(cardNumber.slice(4))}`;\n};\n\nconst prefixCardExpiry = expiry => {\n  if (expiry.length === 1) {\n    if (expiry === \"0\" || expiry === \"1\") {\n      return expiry;\n    } else {\n      return `0${expiry}`;\n    }\n  } else {\n    return expiry;\n  }\n};\n\nconst formatCardExpiry = cardExpiry => {\n  if (!cardExpiry.length) return \"\";\n  const nonNumericCharactersRe = /[^0-9]/;\n  const containsNonNumericCharacters = nonNumericCharactersRe.test(cardExpiry);\n  if (containsNonNumericCharacters) return cardExpiry;\n  const expiry = prefixCardExpiry(cardExpiry);\n  if (expiry.length < 3) return expiry;\n  return `${expiry.slice(0, 2)}/${formatCardNumber(expiry.slice(2))}`;\n};\n\nconst isValidExpiryDate = dateString => {\n  const re = /^\\d\\d\\d\\d$/g;\n  let error = \"\",\n      isValid = true;\n  const isInTheValidFormat = re.test(dateString);\n\n  if (!isInTheValidFormat) {\n    error = \"Your card's expiration not in the correct format\";\n    isValid = false;\n    return {\n      error,\n      isValid\n    };\n  }\n\n  const month = parseInt(dateString.substring(0, 2));\n  const year = parseInt(dateString.substring(2));\n  const now = new Date();\n  const currentYear = now.getFullYear();\n  const shortCurrentYear = parseInt(`${currentYear}`.substring(2));\n  const currentMonth = now.getMonth();\n  const yearHasExpired = year < shortCurrentYear;\n  const yearIsSameAsCurrentYear = year === shortCurrentYear;\n\n  if (yearHasExpired) {\n    error = \"Your card's expiration is in the past\";\n    isValid = false;\n    return {\n      error,\n      isValid\n    };\n  } else {\n    if (yearIsSameAsCurrentYear) {\n      const monthHasExpired = month < currentMonth;\n\n      if (monthHasExpired) {\n        error = \"Your card's expiration is in the past\";\n        isValid = false;\n        return {\n          error,\n          isValid\n        };\n      } else {\n        return {\n          error,\n          isValid\n        };\n      }\n    } else {\n      return {\n        error,\n        isValid\n      };\n    }\n  }\n};\n\nconst isValidCardCVV = CVV => {\n  let error = \"\",\n      isValid = true;\n  const re = /^\\d{3,4}$/;\n  isValid = re.test(CVV);\n\n  if (!isValid) {\n    error = \"Please check your CVV\";\n  }\n\n  return {\n    error,\n    isValid\n  };\n};\n\nconst getCardIssuer = cardNumber => {\n  let cardIssuer = \"UNKNOWN\";\n\n  if (cardNumber.startsWith(\"4\")) {\n    cardIssuer = \"VISA\";\n  } else if (cardNumber.startsWith(\"5\")) {\n    const re = /^5[1-5]/;\n\n    if (re.test(cardNumber)) {\n      cardIssuer = \"MASTERCARD\";\n    }\n  } else if (cardNumber.startsWith(\"6\")) {\n    const re = /^(6011|65)/;\n\n    if (re.test(cardNumber)) {\n      cardIssuer = \"DISCOVER\";\n    }\n  } else if (cardNumber.startsWith(\"3\")) {\n    const re = /^(34|37)/;\n\n    if (re.test(cardNumber)) {\n      cardIssuer = \"AMEX\";\n    }\n  }\n\n  return cardIssuer;\n};\n\nconst VALIDATORS = {\n  cardNumber: isValidCardNumber,\n  cardExpiry: isValidExpiryDate,\n  nameOnCard: isNotEmpty,\n  cardCVV: isValidCardCVV\n};\nconst DATA_SANITIZERS = {\n  cardNumber: stripNonNumericCharacters,\n  cardExpiry: stripNonNumericCharacters\n};\nconst DATA_FORMATTERS = {\n  cardNumber: formatCardNumber,\n  cardExpiry: formatCardExpiry\n};\nconst CARD_ISSUER_LOGOS = {\n  VISA: \"https://js.stripe.com/v3/fingerprinted/img/visa-d6c6e0a636f7373e06d5fb896ad49475.svg\",\n  MASTERCARD: \"https://js.stripe.com/v3/fingerprinted/img/mastercard-a96ee3841a5e1e28d05ed3f0f4da62b8.svg\",\n  AMEX: \"https://js.stripe.com/v3/fingerprinted/img/amex-edf6011de255d8a4c22904795c9d8770.svg\",\n  DISCOVER: \"https://js.stripe.com/v3/fingerprinted/img/discover-8f3d8fc6ef836da1fcac12c095ee6fb8.svg\"\n};\nexport { DATA_FORMATTERS, DATA_SANITIZERS, VALIDATORS, CARD_ISSUER_LOGOS, identity, isNotEmpty, isValidCardCVV, isValidCardNumber, isValidExpiryDate, formatCardExpiry, formatCardNumber, stripNonNumericCharacters, getCardIssuer };","map":{"version":3,"sources":["/home/max/Desktop/DealershipApp/client/src/utils.js"],"names":["isNotEmpty","value","error","isValid","isValidCardNumber","cardNumber","re","test","stripNonNumericCharacters","str","replace","identity","formatCardNumber","length","nonNumericCharactersRe","containsNonNumericCharacters","slice","prefixCardExpiry","expiry","formatCardExpiry","cardExpiry","isValidExpiryDate","dateString","isInTheValidFormat","month","parseInt","substring","year","now","Date","currentYear","getFullYear","shortCurrentYear","currentMonth","getMonth","yearHasExpired","yearIsSameAsCurrentYear","monthHasExpired","isValidCardCVV","CVV","getCardIssuer","cardIssuer","startsWith","VALIDATORS","nameOnCard","cardCVV","DATA_SANITIZERS","DATA_FORMATTERS","CARD_ISSUER_LOGOS","VISA","MASTERCARD","AMEX","DISCOVER"],"mappings":"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","sourcesContent":["const isNotEmpty = value => {\n    let error = \"\",\n      isValid = true;\n    if (value === \"\") {\n      error = \"Please provide a value\";\n      isValid = false;\n    }\n    return { error, isValid };\n  };\n  \n  const isValidCardNumber = cardNumber => {\n    let error = \"\",\n      isValid = true;\n    const re = /^\\d{16}$/;\n    isValid = re.test(cardNumber);\n    if (!isValid) {\n      error = \"Your card number is incomplete\";\n    }\n  \n    return { error, isValid };\n  };\n  \n  const stripNonNumericCharacters = str => {\n    return str.replace(/[^0-9]+/g, \"\");\n  };\n  \n  const identity = value => value;\n  \n  const formatCardNumber = cardNumber => {\n    if (!cardNumber.length) return \"\";\n    const nonNumericCharactersRe = /[^0-9]/;\n    const containsNonNumericCharacters = nonNumericCharactersRe.test(cardNumber);\n    if (containsNonNumericCharacters) return cardNumber;\n  \n    if (cardNumber.length < 5) return cardNumber;\n  \n    return `${cardNumber.slice(0, 4)} ${formatCardNumber(cardNumber.slice(4))}`;\n  };\n  \n  const prefixCardExpiry = expiry => {\n    if (expiry.length === 1) {\n      if (expiry === \"0\" || expiry === \"1\") {\n        return expiry;\n      } else {\n        return `0${expiry}`;\n      }\n    } else {\n      return expiry;\n    }\n  };\n  \n  const formatCardExpiry = cardExpiry => {\n    if (!cardExpiry.length) return \"\";\n    const nonNumericCharactersRe = /[^0-9]/;\n    const containsNonNumericCharacters = nonNumericCharactersRe.test(cardExpiry);\n    if (containsNonNumericCharacters) return cardExpiry;\n  \n    const expiry = prefixCardExpiry(cardExpiry);\n  \n    if (expiry.length < 3) return expiry;\n  \n    return `${expiry.slice(0, 2)}/${formatCardNumber(expiry.slice(2))}`;\n  };\n  \n  const isValidExpiryDate = dateString => {\n    const re = /^\\d\\d\\d\\d$/g;\n    let error = \"\",\n      isValid = true;\n    const isInTheValidFormat = re.test(dateString);\n    if (!isInTheValidFormat) {\n      error = \"Your card's expiration not in the correct format\";\n      isValid = false;\n      return { error, isValid };\n    }\n  \n    const month = parseInt(dateString.substring(0, 2));\n    const year = parseInt(dateString.substring(2));\n  \n    const now = new Date();\n    const currentYear = now.getFullYear();\n    const shortCurrentYear = parseInt(`${currentYear}`.substring(2));\n    const currentMonth = now.getMonth();\n  \n    const yearHasExpired = year < shortCurrentYear;\n    const yearIsSameAsCurrentYear = year === shortCurrentYear;\n    if (yearHasExpired) {\n      error = \"Your card's expiration is in the past\";\n      isValid = false;\n      return { error, isValid };\n    } else {\n      if (yearIsSameAsCurrentYear) {\n        const monthHasExpired = month < currentMonth;\n        if (monthHasExpired) {\n          error = \"Your card's expiration is in the past\";\n          isValid = false;\n          return { error, isValid };\n        } else {\n          return { error, isValid };\n        }\n      } else {\n        return { error, isValid };\n      }\n    }\n  };\n  \n  const isValidCardCVV = CVV => {\n    let error = \"\",\n      isValid = true;\n    const re = /^\\d{3,4}$/;\n    isValid = re.test(CVV);\n    if (!isValid) {\n      error = \"Please check your CVV\";\n    }\n  \n    return { error, isValid };\n  };\n  \n  const getCardIssuer = cardNumber => {\n    let cardIssuer = \"UNKNOWN\";\n  \n    if (cardNumber.startsWith(\"4\")) {\n      cardIssuer = \"VISA\";\n    } else if (cardNumber.startsWith(\"5\")) {\n      const re = /^5[1-5]/;\n      if (re.test(cardNumber)) {\n        cardIssuer = \"MASTERCARD\";\n      }\n    } else if (cardNumber.startsWith(\"6\")) {\n      const re = /^(6011|65)/;\n      if (re.test(cardNumber)) {\n        cardIssuer = \"DISCOVER\";\n      }\n    } else if (cardNumber.startsWith(\"3\")) {\n      const re = /^(34|37)/;\n      if (re.test(cardNumber)) {\n        cardIssuer = \"AMEX\";\n      }\n    }\n  \n    return cardIssuer;\n  };\n  \n  const VALIDATORS = {\n    cardNumber: isValidCardNumber,\n    cardExpiry: isValidExpiryDate,\n    nameOnCard: isNotEmpty,\n    cardCVV: isValidCardCVV\n  };\n  \n  const DATA_SANITIZERS = {\n    cardNumber: stripNonNumericCharacters,\n    cardExpiry: stripNonNumericCharacters\n  };\n  \n  const DATA_FORMATTERS = {\n    cardNumber: formatCardNumber,\n    cardExpiry: formatCardExpiry\n  };\n  \n  const CARD_ISSUER_LOGOS = {\n    VISA:\n      \"https://js.stripe.com/v3/fingerprinted/img/visa-d6c6e0a636f7373e06d5fb896ad49475.svg\",\n    MASTERCARD:\n      \"https://js.stripe.com/v3/fingerprinted/img/mastercard-a96ee3841a5e1e28d05ed3f0f4da62b8.svg\",\n    AMEX:\n      \"https://js.stripe.com/v3/fingerprinted/img/amex-edf6011de255d8a4c22904795c9d8770.svg\",\n    DISCOVER:\n      \"https://js.stripe.com/v3/fingerprinted/img/discover-8f3d8fc6ef836da1fcac12c095ee6fb8.svg\"\n  };\n  \n  export {\n    DATA_FORMATTERS,\n    DATA_SANITIZERS,\n    VALIDATORS,\n    CARD_ISSUER_LOGOS,\n    identity,\n    isNotEmpty,\n    isValidCardCVV,\n    isValidCardNumber,\n    isValidExpiryDate,\n    formatCardExpiry,\n    formatCardNumber,\n    stripNonNumericCharacters,\n    getCardIssuer\n  };"]},"metadata":{},"sourceType":"module"}